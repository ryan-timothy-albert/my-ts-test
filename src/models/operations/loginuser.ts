/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type LoginUserRequest = {
    /**
     * The user name for login
     */
    username?: string | undefined;
    /**
     * The password for login in clear text
     */
    password?: string | undefined;
};

export type LoginUserResponse = {
    headers: { [k: string]: Array<string> };
    result: string;
};

/** @internal */
export namespace LoginUserRequest$ {
    export const inboundSchema: z.ZodType<LoginUserRequest, z.ZodTypeDef, unknown> = z.object({
        username: z.string().optional(),
        password: z.string().optional(),
    });

    export type Outbound = {
        username?: string | undefined;
        password?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginUserRequest> = z.object({
        username: z.string().optional(),
        password: z.string().optional(),
    });
}

/** @internal */
export namespace LoginUserResponse$ {
    export const inboundSchema: z.ZodType<LoginUserResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
            Result: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                Headers: "headers",
                Result: "result",
            });
        });

    export type Outbound = {
        Headers: { [k: string]: Array<string> };
        Result: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginUserResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
            result: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                headers: "Headers",
                result: "Result",
            });
        });
}
