/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UploadFileRequest = {
    /**
     * ID of pet to update
     */
    petId: number;
    /**
     * Additional Metadata
     */
    additionalMetadata?: string | undefined;
    requestBody?: Uint8Array | string | undefined;
};

/** @internal */
export namespace UploadFileRequest$ {
    export const inboundSchema: z.ZodType<UploadFileRequest, z.ZodTypeDef, unknown> = z
        .object({
            petId: z.number().int(),
            additionalMetadata: z.string().optional(),
            RequestBody: b64$.zodInbound.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        petId: number;
        additionalMetadata?: string | undefined;
        RequestBody?: Uint8Array | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileRequest> = z
        .object({
            petId: z.number().int(),
            additionalMetadata: z.string().optional(),
            requestBody: b64$.zodOutbound.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
