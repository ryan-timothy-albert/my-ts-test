/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Status values that need to be considered for filter
 */
export const Status = {
    Available: "available",
    Pending: "pending",
    Sold: "sold",
} as const;
/**
 * Status values that need to be considered for filter
 */
export type Status = ClosedEnum<typeof Status>;

export type FindPetsByStatusRequest = {
    /**
     * Status values that need to be considered for filter
     */
    status?: Status | undefined;
};

/** @internal */
export namespace Status$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);
    export const outboundSchema: z.ZodNativeEnum<typeof Status> = inboundSchema;
}

/** @internal */
export namespace FindPetsByStatusRequest$ {
    export const inboundSchema: z.ZodType<FindPetsByStatusRequest, z.ZodTypeDef, unknown> =
        z.object({
            status: Status$.inboundSchema.default("available"),
        });

    export type Outbound = {
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FindPetsByStatusRequest> =
        z.object({
            status: Status$.outboundSchema.default("available"),
        });
}
