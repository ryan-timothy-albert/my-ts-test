/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Order Status
 */
export const OrderStatus = {
    Placed: "placed",
    Approved: "approved",
    Delivered: "delivered",
} as const;
/**
 * Order Status
 */
export type OrderStatus = ClosedEnum<typeof OrderStatus>;

export type Order = {
    id?: number | undefined;
    petId?: number | undefined;
    quantity?: number | undefined;
    shipDate?: Date | undefined;
    /**
     * Order Status
     */
    status?: OrderStatus | undefined;
    complete?: boolean | undefined;
};

/** @internal */
export namespace OrderStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof OrderStatus> = z.nativeEnum(OrderStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof OrderStatus> = inboundSchema;
}

/** @internal */
export namespace Order$ {
    export const inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        petId: z.number().int().optional(),
        quantity: z.number().int().optional(),
        shipDate: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        status: OrderStatus$.inboundSchema.optional(),
        complete: z.boolean().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        petId?: number | undefined;
        quantity?: number | undefined;
        shipDate?: string | undefined;
        status?: string | undefined;
        complete?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Order> = z.object({
        id: z.number().int().optional(),
        petId: z.number().int().optional(),
        quantity: z.number().int().optional(),
        shipDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        status: OrderStatus$.outboundSchema.optional(),
        complete: z.boolean().optional(),
    });
}
