/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import { Category, Category$ } from "./category.js";
import { Tag, Tag$ } from "./tag.js";
import * as z from "zod";

/**
 * pet status in the store
 */
export const Status = {
    Available: "available",
    Pending: "pending",
    Sold: "sold",
} as const;
/**
 * pet status in the store
 */
export type Status = ClosedEnum<typeof Status>;

export type Pet = {
    id?: number | undefined;
    name: string;
    category?: Category | undefined;
    photoUrls: Array<string>;
    tags?: Array<Tag> | undefined;
    /**
     * pet status in the store
     */
    status?: Status | undefined;
};

/** @internal */
export namespace Status$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);
    export const outboundSchema: z.ZodNativeEnum<typeof Status> = inboundSchema;
}

/** @internal */
export namespace Pet$ {
    export const inboundSchema: z.ZodType<Pet, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        name: z.string(),
        category: Category$.inboundSchema.optional(),
        photoUrls: z.array(z.string()),
        tags: z.array(Tag$.inboundSchema).optional(),
        status: Status$.inboundSchema.optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        name: string;
        category?: Category$.Outbound | undefined;
        photoUrls: Array<string>;
        tags?: Array<Tag$.Outbound> | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pet> = z.object({
        id: z.number().int().optional(),
        name: z.string(),
        category: Category$.outboundSchema.optional(),
        photoUrls: z.array(z.string()),
        tags: z.array(Tag$.outboundSchema).optional(),
        status: Status$.outboundSchema.optional(),
    });
}
