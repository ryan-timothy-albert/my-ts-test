/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Not Found error
 */
export type ApiErrorNotFoundData = {
    status: number;
    error: string;
    code: string;
};

/**
 * Not Found error
 */
export class ApiErrorNotFound extends Error {
    status: number;
    error: string;
    code: string;

    /** The original data that was passed to this error instance. */
    data$: ApiErrorNotFoundData;

    constructor(err: ApiErrorNotFoundData) {
        super("");
        this.data$ = err;

        this.status = err.status;
        this.error = err.error;
        this.code = err.code;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ApiErrorNotFound";
    }
}

/** @internal */
export namespace ApiErrorNotFound$ {
    export const inboundSchema: z.ZodType<ApiErrorNotFound, z.ZodTypeDef, unknown> = z
        .object({
            status: z.number().int(),
            error: z.string(),
            code: z.string(),
        })
        .transform((v) => {
            return new ApiErrorNotFound(v);
        });

    export type Outbound = {
        status: number;
        error: string;
        code: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApiErrorNotFound> = z
        .instanceof(ApiErrorNotFound)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                status: z.number().int(),
                error: z.string(),
                code: z.string(),
            })
        );
}
